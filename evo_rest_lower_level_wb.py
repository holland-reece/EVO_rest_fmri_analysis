# EVO Lower-level ROI analysis - Nipype/Connectome Workbench version

# Holland Brown

# Updated 2023-10-17
# Created 2023-09-22

# Next:
    # add read_json function to my_imaging_tools module (started)
    # figure out how to combine Glasser parcels into our ROIs

"""
Consider this procedure...
https://www.mail-archive.com/hcp-users@humanconnectome.org/msg04539.html

1) Extract mean unsmoothed ROI data to text:
wb_command -cifti-roi-average ${subject}_${run}.dtseries.nii 
roi_data_${sub}_${run}_unsmoothed.txt -vol-roi ${sub}_roi_mask.nii # probably works for surface-based ROIs as well but haven't tested
2) Convert extracted ROI data to cifti:
wb_command -cifti-create-scalar-series roi_data_${sub}_${run}_unsmoothed.txt 
roi_data_${sub}_${run}_unsmoothed.dscalar.nii -transpose -series SECOND 0 1
3) Cross-correlate this new ROI timeseries cifti with the smoothed whole-brain 
cifti data:
wb_command -cifti-cross-correlation ${subject}_${run}_smoothed.dtseries.nii 
roi_data_${sub}_${run}_unsmoothed.dscalar.nii 
correlation_${sub}_${run}.dscalar.nii
4) Repeat for all runs and average:
wb_command -cifti-average correlation_${sub}_average.dscalar.nii -cifti 
correlation_${sub}_run1.dscalar.nii -cifti correlation_${sub}_run2.dscalar.nii 
-cifti correlation_${sub}_run3.dscalar.nii -cifti 
correlation_${sub}_run4.dscalar.nii
5) Fisher z transform results:
wb_command -cifti-math "atanh(x)" z_correlation_${sub}_average.dscalar.nii -var 
x correlation_${sub}_average.dscalar.nii

"""

# ---------------------------------------------------------------------------------------------------------------

# %%
import os
import tqdm
import json
from my_imaging_tools import fmri_tools
# from nipype import Node, Function
# from nipype.interfaces.workbench.cifti import WBCommand

datadir = f'/home/holland/Desktop/EVO_TEST/subjects' # where subject folders are located
atlasdir = f'/home/holland/Desktop/EVO_atlas_search' # where HCP MMP1.0 files are located (downloaded from BALSA)
rois = ['MFG'] # names of ROI text files containing HCP MMP1.0 ROI label names
atlas_labels = f'' # HCP MMP1.0 parcel labels (either *.dlabel.nii or *.dscalar.nii files)

q = fmri_tools(datadir)
sessions = ['1','2']


# %% FIX: give multiple ROIs as inputs to cifti-label-to-roi? see cmd[0] '-name' option
# Create ROI mask from HCP-MMP1.0 atlas
cmd = [None]*3
for sub in q.subs:
    for session in sessions:
        subdir = f'{datadir}/{sub}/func/rest/session_{session}/run_1'
        if os.path.isdir(subdir):
            for roi in rois:
                input_cifti = f'{subdir}'
                subject_left_surface = f'{subdir}'
                subject_right_surface = f'{subdir}'
                output_roi = f'{subdir}/{roi}_S{session}_R1'
                
                # create subject-specific binary ROI mask from HCP-MMP1.0 parcels
                cmd[0] = f'wb_command -cifti-label-to-roi {atlas_labels} {subdir}/{output_roi}.dscalar.nii -name IFSa_ROI'

                # separate roi mask into left and right GIFTI surface hemispheres
                cmd[1] = f'wb_command -cifti-separate {output_roi}.dscalar.nii COLUMN -metric CORTEX_LEFT {output_roi}.L.shape.gii'
                cmd[2] = f'wb_command -cifti-separate {output_roi}.dscalar.nii COLUMN -metric CORTEX_RIGHT {output_roi}.R.shape.gii'
                q.exec_cmds(cmd)


# %% (1) Extract ROI timeseries from ciftis, convert to text files, convert to CIFTIS

# cmd_list = [None]*3 # allocate memory for commands
# for sub in tqdm(q.subs):
#     for roi in rois:
#         for session in sessions:
#             # nifti_input = f'{datadir}/{sub}/{sub}_{preproc_folder}/{sub}_{nifti_fn}' # subject's preprocessed AFNI ICA results dir
#             nifti_input = f''
#             new_roi_path = f'' # subject's roi analysis dir
#             tsAlready = os.path.exists(f'{new_roi_path}') # check if time series file already exists for this participant
#             if tsAlready == False: # if time series file doesn't exist...
#                 print(f'Extracting ROI time series for {sub}...\n')

#                 # NEED ROI MASK NIFTI INPUT; also identify input cifti
#                 roi_label = f'{datadir}/{sub}/anat/T1w/{sub}/label/{label_gifti}'
#                 cmd_list[0] = 'wb_command -gifti-label-to-roi' # identify an ROI from anatomical parc labels and extract roi cifti
#                 # cmd_list[1] = f'wb_command -cifti-create-dense-from-template -label {roi_label}' # use label files generated by MEP
#                 cmd_list[1] = f'wb_command -cifti-roi-average {sub}_{roi}_S{session}.dtseries.nii {sub}_{roi}_S{session}.txt -vol-roi {sub}_roi_mask.nii.gz'
#                 cmd_list[2] = f'wb_command -cifti-create-scalar-series roi_data_${sub}_${run}_unsmoothed.txt roi_data_${sub}_${run}_unsmoothed.dscalar.nii -transpose -series SECOND 0 1'
#                 q.exec_cmds(cmd_list) # execute bash commands in system terminal
#             else:
#                 print(f'{roi} time series file already exists for subject {sub}...\n')


# %% Cross-correlate this new ROI timeseries cifti with the smoothed whole-brain cifti data
# wb_command -cifti-cross-correlation ${subject}_${run}_smoothed.dtseries.nii 
# roi_data_${sub}_${run}_unsmoothed.dscalar.nii 
# correlation_${sub}_${run}.dscalar.nii






# %% ROI-to-wholebrain correlation
# https://www.humanconnectome.org/software/workbench-command/-cifti-average-roi-correlation

"""

wb_command -cifti-average-roi-correlation

    Averages rows for each map of the ROI(s), takes the correlation of each
    ROI average to the rest of the rows in the same file, applies the fisher
    small z transform, then averages the results across all files.  ROIs are
    always treated as weighting functions, including negative values.  For
    efficiency, ensure that everything that is not intended to be used is
    zero in the ROI map.  If -cifti-roi is specified, -left-roi, -right-roi,
    -cerebellum-roi, and -vol-roi must not be specified.  If multiple
    non-cifti ROI files are specified, they must have the same number of
    columns.

"""

# cmd = [None]*2
# for sub in tqdm(q.subs):
#     for roi_name in rois:
#         roi = f'{roidir}/{roi_name}.nii.gz' # full path to roi nifti file

#         # get TR from JSON
#         with open(f'{datadir}/{sub}/func/unprocessed/session_1/run_1/Rest_S1_E1_R1.json', 'rt') as rest_json:
#             rest_info = json.load(rest_json)
#         TR = rest_info['RepetitionTime']

#         for s in sessions:
#             subdir = f'{datadir}/{sub}/func/rest/session_{s}/run_1'
#             cifti_out = f''
#             cmd[0] = f'wb_command -cifti-average-roi-correlation {cifti_out} - output - output cifti file'

# %% Fisher z-score the data

# wb_command -cifti-math "atanh(x)" z_correlation_${sub}_average.dscalar.nii -var 
# x correlation_${sub}_average.dscalar.nii
  
